---
title: "네 번째 블로그"
layout: post
date: 2018-01-10 14:54
image: /assets/images/markdown.jpg
headerImage: false
tag:
star: false
category: blog
author: 신명철
description: 나의 네 번째 기술 블로그
---

## Summary:
그 동안의 블로그와 네번째 블로그


## 새로운 블로그

#### 첫번째 블로그 (네이버)
나의 첫번째 기술 블로그는 처음 IT 업계에 발을 들이며 만든 네이버 블로그 였다.
지금은 모르지만 그 당시에는(2015년 즈음) Syntaxhighlight를 따로 지원하지 않아 코드를 표현하기가 너무 불편했고
[https://colorscripter.com/](https://colorscripter.com/)라는 서비스를 이용해서 블로그 내에 코드를 붙여 넣었었다.
그리고 정말 아무것도 모르던 때라 포스팅은 검색결과를 가져오거나 나름의 해법들을 옮겨오는 포스팅이 대다수 였는데
이게 위지윅 에디터에 붙이다보니 폰트며 양식이며 모든게 포스트마다 원본글에 따라 제각각 이다 보니 글의 일관성도 없고 가독성도 상당히 떨어졌다.
이 당시의 블로그의 목적은 내가 작성한 포스트와 공유가 아닌,
내가 필요한 혹은 다시 찾아볼 것 같은 정보들을 나만 보기 위해 모아놓는 것이었기 때문에 얼마간 운영하다 금방 그만뒀다.

#### 두 번째 블로그(워드프레스)
첫 블로그를 서비스를 이용하다보니 두번째 블로그는 왠지 직접 만들어보고 싶었고, 마침 그당시 개인적인 학습의 용도로 사용하던
[스쿨호스팅](https://www.phps.kr/)도 있었기에 도메인까지 사서 리눅스에 여러가지 플랫폼을 설치하며 알아봤었다.
[그누보드](https://sir.kr/), [제로보드](https://www.xpressengine.com/) 그리고 [워드프레스](https://wordpress.com)까지 이것저것 설치해보다가 결국은 그 당시에 가장 핫 했던 워드프레스로 결정하고(이러면 안되는데 나는 자꾸만 '핫'에 끌리더라) 제공되는 기본템플릿을 수정하여 스킨까지 직접 만들어서 제작했다.

참조 : 
> 이때 관련 서적을 구입하며 알게된 많이 도움이 됬던 [김덕기님의 블로그](http://martian36.tistory.com/)
> 이 분 덕분에 입문한 부트스트랩은 아직까지도 참 유용하게 쓴다

그러나 제공되는 서비스를 그대로 사용하던 네이버 블로그와 달리 직접 제작한 블로그는 문제가 많아도 너무 많았다.
신입이라 바쁘기도 했지만 오랜만에 들어가보면 덕지덕지 붙여놓은 플러그인들은 작동 안하기 일쑤고 뭣모르고 업데이트라도 했다간 홈페이지가 아주 산산조각이 났다.
그리고 업무에 워드프레스를 전혀 쓰지 않았기에 시간이 조금만 흐르고 뭔가를 새로 붙이거나, 스킨이나 레이아웃을 조금만 바꾸려고 해도 내가 만든걸 내가 다시 공부해야하는 사태가 계속되자 직접운영하는 서비스의 어려움만을 교훈으로 남기고 접게 되었다

#### 세 번째 블로그(티스토리)
출근을 1시간에서 30분정도 일찍하는 습관이 있다보니 자연스레 책상에 앉자마자 하는일이 다른 개발자들의 블로그와 최신기술 동향등을 살펴보는 일이 거의 습관처럼 되었는데 그러다보니 티스토리로 기술블로그를 운영하는 분이 상당히 많더라.
그러다보니 자연히 티스토리에 대해 관심을 갖게 됬고, 내가 가진 `HTML/CSS` 지식만으로도 충분히 스킨과 레이아웃도 쉽게 변경가능하고 워드프레스와 달리 php를 만질 필요도 없을 뿐더러 DB도 내가 전혀 신경쓸 필요가 없다는거에 강한 매력을 느꼈다.
*(특히 바로 전 블로그가 여러가지 신경쓸게 많아서 스스로 지친 경험이 있다보니 더더욱)*

그렇게 시작하게된 티스토리 블로그는 내가 서비스를 받는 입장이다보니 여러가지 장점들이 상당했고
스킨을 제외한 자유도가 많이 떨어짐에도 불구하고 그정도는 충분히 상쇄가 가능했다.
오히려 방문자수 체크나 유입경로 까지 표기가 되니 장점만 더 부각되더라
그래서인지 블로그중에 가장 오래 유지가 되었고 아직도 사용하는데는 큰 문제가 없다

그래서 티스토리 블로그는 장점만 있느냐? **Nope!**
다른분들은 어떨지 모르지만 나같은 경우는 `Markdown`문법을 이용해서 포스팅을 하고 그중 소스코드 같은 경우는
[SyntaxHighlighter](http://alexgorbatchev.com/SyntaxHighlighter/) 라는 플러그인을 이용했는데,
이게 나같은 경우는 제대로 포스팅을 할라 치면 생각보다 불편했는데 대략적인 프로세스는 다음과 같다

**티스토리 포스팅 프로세스 : **
 
1. 마크다운 문법으로 편집기에서 글을 작성
2. 소스부분을 플러그인에 맞게 수정
3. 티스토리 포스팅시 HTML 편집모드로 글작성
4. 확인
5. 수정
6. 4~5 반복

4~5번이 반복됬던 이유는 내가 사용한 스킨의 css와 마크다운 문법 그리고 `systaxhighlighter`의 css가 가끔 겹치거나 충돌을 일으켜 제대로 표현이 되지 않는 문제가 종종 발생했기 때문이다.
방법을 더 찾아보거나 내 스킨을 조금 수정했다면 충분히 해결가능한 문제였겠지만 귀찮고 귀찮고 너무나 귀찮아서
관두기로 했다.

그렇게 티스토리 블로그는 처음 의도(내가 직접 글을 포스팅하고 내 생각을 정리)와는 달리 점차 단순 코드조각
(마치 `gist` 같은)을 올리거나 아주 단편적인 몇줄의 이슈해결 내용들만을 올리는 용도로 사용하게 됬고
이런 용도라면 사실 쓰는데 전혀가 문제가 없는 상태다.

#### 네 번째 블로그(github page)
사실 github에서 제공하는 정적 page에는 오래전부터 샘플 코드(멋들어진 유료 부트스트랩 템플릿)를 올려놓고
언젠간 이걸로 뭔가를 해보자 해보자 하고 막연히 생각만 하고 있었는데, 
시간이 많이 지나고 돌아보니 꽤 많은 분들이 이걸 블로그 용도로 이용을 하고 있는걸 봤다.

작년 연말에 SNS에 개발자들의 회고록등이 상당히 많이 올라왔었는데 그중 몇몇 분들의 아주 깔끔하고, 아주 세련된 github page를 보면서 5분도 안되서 나도 동참하기로 결정했다.
참조 : 
> - [GitHub Page](https://pages.github.com)
> - [Jekyll](https://jekyllrb-ko.github.io/)

사실 별 생각 없이 만들었는데 보다보니 `Github Page`와 `Jekyll`의 시너지가 예상보다 훨씬 괜찮았다.
> *No more databases, comment moderation, or pesky updates to install—just your content.*

`Jekyll`공식 가이드에 적힌 위 문구처럼 정말 신경쓸거 없이 포스팅에 집중할 수 있는 구조였고
티스토리의 거의 유일한 불만이었던 문제가 상당부분 해결됬고 나의 귀차니즘을 해결해 줄 수 있는 대안처럼 보였다.

**깃허브페이지 포스팅 프로세스 :**
1. 마크다운 편집기로 포스팅 작성
2. git commit->push 

그리고 무엇보다 `GitHub`다 더 무슨 말이 필요할까
(이걸 핑계로 한번이라도 더 commit을...)
이제야말로 포스팅에 집중 할 수 있는 서비스로 `Github Page`를 선택하고 티스토리는 지금처럼 코드조각들을 올리거나
링크들을 공유하기로 하고, 직접적인 글을 작성하는건 여기에 집중을 해볼까 한다.
이 마음이 이번엔 얼마나 갈지 모르겠지만 `Github`가 끊임없이 나를 자극해주길 빌며 포스팅을 마친다.

