---
title: "세 번째 이직"
layout: post
date: 2018-01-19 13:21
image: /assets/images/markdown.jpg
headerImage: false
tag:
- 이직
- 회고
category: blog
author: 신명철
description: 어느덧 세 번째 이직을 회고하며

---

## Summary:

두 군데의 회사를 거치며 세번째 이직을 결심하게 된 계기와 그 과정

## 시작부터 지금까지
어느새 3번째 이직을 하게 됐다. 지난해 퇴직을 하고 현재까지의 시간은 나에게 있어서 중요한 일종의 터닝포인트라고 할만한 
일들이 많이 있었다. 
퇴직후 결혼도 하게 되었고, 꿈꿔오던 회사들에 면접을 직접 보며 모자란 부분을 새삼 실감하기도 했다.
*(이 부분은 상당히 긴 얘기가 될 것 같아 별도의 포스팅을 할 예정이다.)*
또한 사이버대학 1학년을 마쳤고, [Scratch](https://scratch.mit.edu/)와 [RUR-PLE](http://rur-ple.sourceforge.net/)을 이용해서 초등학생 아이들에게 코딩을 가르치기도 했다.
마지막으로 그동안 줄곧 생각해왔던 개발자로써의 포지션 전환도 일부분 성공했다(아직 첫 출근 전이지만)

**Scrach와 RUR-PLE:**
> - scrach : 8~16세를 대상으로 만들어진 블록기반의 코딩을 가능하게 하는 MIT 라이센스의 프로젝트
> - RUR-PLE : 아이들을 대상으로 만들어진 `Python`을 기반의 프로젝트

사실 2군데의 회사를 거치면서 끊임없이 날 괴롭히고 힘들게 했던 부분들이 있었는데
그건 바로 SI(이전 회사들은 모두 웹에이전시였다.)의 특성으로 야기되는 문제들이었다.
SI의 구조상 정해진 시간안에 반드시 아웃풋이 나와야하고 또한 이 빈도수가 상당히 많을 뿐더러 불합리한 일정도 많다보니 코드의 품질보다는 속도와 결과만이 중요하고 결과적으로는 나의 서비스가 아닌 남의 서비스가 되기때문에 그만큼 지나간 프로젝트들에 대한 애정도 적었다.

물론 비슷한 개발환경의 새프로젝트가 주어질 경우 그만큼 리팩토링을 하고 보완 수정을 거치긴 했지만 그건 어디까지나 기획자도 고객도 그 누구도 모르는, 온전히 실무를 하는 개발자들만이 공유하는 일종의 만족감 정도로 끝나기 일쑤고 회사 자체는 그로인한 향상성과 퍼포먼스 증가는 사실 관심도 없을뿐만 아니라 그에 할애되는 시간 자체를 용납하지 않기도 했다.

다른 개발자들의 블로그와 SNS에서 보는 `코드리뷰`와 `리팩토링`은 완전히 남의나라 얘기였고 개발자로써 역량을 높이고 싶은 욕심은 있지만 그게 업무로 직결되지는 않다보니 자기계발과 업무는 완전히 동떨어져 버렸다.

흔히들 웹개발을 할때 웹에이전시가 고생은 하겠지만 첫 회사로는 좋다는 글을 많이 봤었는데, 이부분은 어느정도 동감하지만
사실 몇몇 회사를 제외한 대다수의 웹에이전시들은(특히 고정수입이 없는) 프로젝트를 따오고 이를 발주해야만 수익이 나는 구조상
아무래도 퀄리티보다는 속도가 우선시 될 수 밖에 없다는게 그동안 내가 겪어온 회사들을 통해 얻은 결론이다
(물론 이는 수백 수천개가 될지도 모르는 회사에서 달랑 2군데만을 경험해본 내가 생각하는 다분히 주관적인 생각이다.)

그래서 나 스스로 어떤회사가 가고싶은지 질문을 해봤다.
- 서비스를 하는 회사인가? 그렇다면 어떤 서비스를 하는 회사인가?
- 개발문화가 잘 정착되어있는 회사인가? 
	- 버전 관리 도구를 사용하는 회사
	- 테스트코드를 작성하는회사
	- 코드리뷰를 하는 회사
	- 안정적인 CTO가 있는 회사
	- 새로운 기술에 거부감이 없고 도전하는 회사
- 개발자를 인정해주는 회사인가?
- 나의 경력에 도움이 되거나 역량을 증진시킬만한 기대치가 있는 회사인가?
- 업무 외적으로도 개발에 대한 관심사를 나눌만한 동료가 있는 회사인가?


이전 직장에서 우스갯소리로 3년차 개발자가 가장 가성비가 좋고 잘 팔린다는 말을 한 적이 있었는데 그래서인지 내 이력서를 보고 먼저
연락이 오는 회사들 대다수는 내가 원하는 회사와는 거리가 멀었고, 반면에 정말 내가 가고싶은 회사들과 잡플래닛의 평판등을 보며 찾아낸 회사들은 생각보다 많지 않았음에도 불구하고 서류통과된 기업은 손에 꼽을정도로 적었다.

## 이력서 작성하기
그동안 잡코리아 이력서를 기반으로 작성했던 이력서로 여태까지 잘 사용해왔지만 자문을 구하고 여러가지 경로로 알아보니 상당히 많은 지적을 받았고 이력서부터 새로 작성하기 시작했다.


**참고:**
> [주니어 개발자를 위한 취업 정보 -Github 저장소](https://github.com/jojoldu/junior-recruit-scheduler)
> 이력서 뿐만 아니라 회사를 찾는데 많은 도움을 받은 `Github` 저장소

'화목한 가정에서 2남중 장남으로 태어나\~~~ '로 시작되는 자기소개서도 전부 뜯어 고치고, 단순히 나열하기만 했던 프로젝트들도
입사지원을 하는 회사에 맞춰 선택해서 해당프로젝트의 기여도, 내가 맡은 업무, 이슈들을 간략하게나마 적었다.

몇백군데에 이력서를 넣은것도 아니기 때문에 사실 이력서를 고치고 나서 서류통과가 더 잘 됬다고 말 할순 없겠지만
대면면접을 하며 느낀결과 수정후와 전은 확실히 차이가 있었다고 개인적으로 생각한다.

물리적으로 이미 지나온 경력을 바꿀 수는 없기에 이 단계에서 내가 할 수 있는 최선은 다했다고 생각했지만 최종보스와도 같은 그 다음 난관이 존재했다. 이름하야 **기술면접!**

## 기술면접 실패하기
요즘은 개발자를 채용할때 코딩테스트(그외 여러가지 기술면접)가 상당히 보편화 되어 있는것 같다.
구글, 페이스북 같은 외국기업은 말할 것도 없고 국내에도 카카오, 네이버등의 큰회사 혹은 기술적으로 유명한 회사들은 코딩테스트를 봤겠지만 이번 이직을 준비하며 겪어보니 내가 원하는 회사는 물론이고 먼저 연락이 온 회사들도 거의 대부분이 기술면접을 진행하고 있었다.

> 여기서 말하는 기술면접이란 이력서와 경력을 바탕으로 질의응답을 하고 기술적인 문제들을 물어오는 것이 아닌, 마치 시험처럼
주어진 문제를 해결하고 풀어내는 과정과 결과를 통해 면접의 다음 프로세스로 진행되는 걸 말한다.

물론 회사마다 진행 방식은 각기 달랐지만 내가 겪은 대표적인 기술면접들은 다음과 같다.

**기술면접 방식**
- 온라인 코딩 (특정 서비스-웹에 접속하여 주어진 문제를 주어진 시간안에 풀고 제출한다)
- 전화 면접(전화로 자료구조, 알고리즘, 네트워크 등에 대한 질문등을 한다.)
- 대면 면접( 면접관이 문제를 제시하고 면접관 앞에서 화이트보드 혹은 종이에 문제를 푼다)

> 온라인코딩과 전화면접의 경우 아무래도 규모가 조금 있는 회사들의 경우가 그랬고, 그 외에는 거의 대면 면접을 실시했다.

기술면접이 워낙 많다보니 조금만 검색해봐도 예상질문 부터 해서 많은 정보들이 쏟아져 나오지만 사실 3년반 동안 웹에이전시에서 있으면서 많은걸 해왔고 또한 성공해왔다고 자부하며 적어도 웹개발에 있어서는 기획서와 디자인파일만 제공된다면 서버구축부터 퍼블리싱-> 프론트 -> 백엔드 개발까지 혼자서 다 할 수 있다는 자신감이 넘쳤기에 첫 기술면접은 사실 별다른 준비도 하지 않고 임했다.

그리고 그 결과는 당연히 탈락 그리고 그 과정조차 멘붕 그 자체였다.

정말 창피한 얘기지만 `Sql injection`, `XSS`의 경우 아주 기본적이면서도 중요하고 `PHP`로 만들어진 보안 라이브러리를 `JAVA`와 `ASP`등의 다른언어로 변환까지 해봤으면서도 이게 뭔지 설명을 제대로 하지도 못했다.

이왕 한김에 창피한 얘기를 더하자면 `REST API`에 대해 아는 대로 설명해보란 문제에도 어버버 거리며 제대로 작성을 못했다.
심지어 가장 최근에 한 프로젝트가 네이티브앱과 통신하는 서버측 `REST API` 구축이고 규약 문서까지 만들고 전담을 했음에도 말이다.

그러다보니 자연히 너무나도 쉬운(그 당시 말고 지금 생각했을때)알고리즘 문제도 못풀었고, 스택과 큐는 심지어 거꾸로 구현했다.
완전히 망하다 못해 면접후 돌아오는 길이 너무나도 부끄러웠다. 이는 준비가 안된 나의 온전한 잘못이었다고 생각한다.

그것뿐만 아니라 요즘은 비전공 개발자들이 정말 많고, 그외에도 각종 학원들도 많아서 학원출신 개발자들도 많지만
나는 컴퓨터공학과도 중퇴에 학원도 다니지 않아서 인지 기본적인 컴퓨터공학에 대한 지식도 상당히 부족함을 느꼈다.

> 물론 꼭 비전공자가 아니더라도 졸업한지 오래됬거나 시간이 흐른 개발자들이 경력직으로 이직을 준비한다면 자료구조, 알고리즘등을 비롯한 컴퓨터공학 지식(학문적인)을 준비해야 원하는 회사에 가기 수월할 거라고 생각한다.

## 기술면접 준비하기
첫번째 인터뷰가 처참했던 만큼 확실한 교훈을 얻었고 곧바로 기술면접에 대한 준비를 하기 시작했다.
코딩인터뷰 책을 사고, 예상질문을 뽑아서 직접 쓰거나 말해보고 알고 있다고 생각하는 것도 꼭 입이나 손으로 출력을 해보고
온라인 강의플랫폼에서 코딩인터뷰 관련 강의도 찾아봤다

**기술면접 준비**
- 서적
	- [코딩 인터뷰 완전분석 - 인사이트/게일 라크만 맥도웰 지음](http://www.kyobobook.co.kr/product/detailViewKor.laf?barcode=9788966260485)
		- 검색해보니 코딩인터뷰의 바이블 같은 책이라고 해서 오프라인에서 구매

	- [코딩인터뷰 퀘스천 - 영진닷컴/나라심하 카루만치 지음](http://www.kyobobook.co.kr/product/detailViewKor.laf?barcode=9788931447842)
		- 관련서적이 대체적으로 두껍다 보니 이동간에 편하게 보고싶어 리디북스 e-book으로 구매해서 태블릿으로 볼때 사용
	- [모두의 알고리즘 with 파이썬 - 길벗/이승찬 지음](http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&barcode=9791160501728)
		- 파이썬 기본 문법은 익혔지만 코딩테스트의 경우 파이썬으로 푸는게 편해서 구매한 아주 기초적인 알고리즘 서적

- 온라인 강의
	- [성공적인 코딩 인터뷰를 위한 코딩 인터뷰 정복하기 - Minsuk Heo](https://www.inflearn.com/course/%EC%BD%94%EB%94%A9-%EC%9D%B8%ED%84%B0%EB%B7%B0/)
		- 아주 짧고 간단하게 기본적인 내용을 훑고 지나가기에 좋은 강의
	- [코딩 인터뷰 완전 분석 풀이 (파이썬) - Minsuk Heo](https://www.inflearn.com/course/%EC%BD%94%EB%94%A9-%EC%9D%B8%ED%84%B0%EB%B7%B0-%EC%99%84%EC%A0%84-%EB%B6%84%EC%84%9D-%ED%92%80%EC%9D%B4-%ED%8C%8C%EC%9D%B4%EC%8D%AC/)
		- 상기 서적 코딩 인터뷰 완전 분석은 거의 `java`로 설명을 하는데 이 책의 풀이를 파이썬으로 한 강의
	- [MIT 공개강좌 - 정규강의:알고리즘 입문](http://www.snow.or.kr/lecture/applied_sciences/computer_science/441.html)
		- MIT OPEN COURSE WARE의 강의중 하나로 한글자막이 있는 강의들도 있다.(영어)

- 온라인플랫폼
	- [프로그래머스 알고리즘 연습](https://programmers.co.kr/learn/challenges)
		- 온라인으로 알고리즘 문제를 풀어볼 수 있는 사이트로 그외에 강의들도 존재한다.
	- [HackerRank](https://www.hackerrank.com/)
		- 온라인으로 알고리즘 문제를 풀어볼 수 있는 사이트(영어)

- Github
	- [Interview_Question_for_Beginner](https://github.com/JaeYeopHan/Interview_Question_for_Beginner) 
		- 한재엽님의 예비 개발자들을 위한 `Github`저장소

사실 위의 적어놓은 내용을 모두 보진 못햇다. 그나마 이건 넘어가도 되겠다 싶은 부분은 넘어가기도 했고
공부를 하는동안 면접을 멈추진 않았기에 공부를 하다가 면접을 보기도 했고, 이직에 성공한 지금 지금시점에도 보고 있는것들이 있다.

다만 지금 생각해볼때 다소 아쉬운점이라면 서적은 일독을 한번씩 했지만 저게 일독한다고 마스터가 되는 내용들도 아니고
강의같은 경우는 물리적인 시간도 상당히 많이 필요하기에 이것저것 너무 많은 것들을 한번에 하진 않았나 싶다.
차라리 한가지 혹은 많아야 두개에서 세개정도만 집중적으로 했어도 결과는 크게 다르지 않았을거라고 생각한다.


## 세번째 회사

총 4군데의 회사에 합격을 했고, 최종적으로 결정한 회사는 [민다](http://www.theminda.com)라는 회사다.
이전 회사의 상급자였던 선임개발자를 통해 소개를 받은 회사로 합격한 회사들은 여러가지 장단점이 있었고 연봉등에서 보다 좋은 조건의 회사들도 있었지만 내가 경험해보고 싶었던 회사와 가장 근접한 회사로 선택을 한 셈이다.

나는 아직 경력도 얼마 안되고(3년6개월) 실력도 얕은 초급 개발자이지만 그래도 이번 이직은 많은걸 배우고 느끼게 해줬던 것 같다.
이전 직장 동료들에게 항상 구글에 입사하고 말겠다고 농담반 진담반으로 말하곤 했었는데,
향후 10년 이내에 이 목표를 이룰수 있도록 하나하나 차근차근 과한 욕심을 부리지 않고 준비해 나가면 언젠간 **구글입사** 라는 제목으로 포스팅을 할 수 있는 날이 오지 않을까 싶다.




